#!/usr/bin/env ruby

require File.dirname(__FILE__) + '/../lib/fakebook'
require 'optparse'
require 'rack'

begin
  server = Rack::Handler::Mongrel
rescue LoadError => e
  server = Rack::Handler::WEBrick
end
rack_options = { :Port => 5000, :Host => "0.0.0.0" }
fakebook_options = { :callback_url => "http://0.0.0.0:3000/facebook/", :canvas_path => "/myapp/", :app_secret => "app-secret", :fb_params => { :user => 123, :session_key => 'session-key', :friends => "2,3,4" } }
config_file = "config/fakebook.yml"

OptionParser.new do |opts|
  opts.banner = "Fakebook #{Fakebook::Version}. Usage: fakebook [options]"

  opts.separator ""
  opts.separator "Options:"

  opts.on("-f", "--config [PATH]", "path to a YAML config file (default: #{config_file})") { |v|
    config_file = v
  }

  opts.on("-c", "--callback [URL]", "the callback URL of your application (default: #{fakebook_options[:callback_url]})") { |v|
    fakebook_options[:callback_url] = v
  }

  opts.on("-a", "--canvas [PATH]", "the canvas path of your application (default: #{fakebook_options[:canvas_path]})") { |v|
    fakebook_options[:canvas_path] = v
  }

  opts.on("-s", "--secret [SECRET]", "the application secret (default: #{fakebook_options[:app_secret]})") { |v|
    fakebook_options[:app_secret] = v
  }

  opts.on("-u", "--user [USER_ID]", "the fb id of the user (default: #{fakebook_options[:fb_params][:user]})") { |v|
    fakebook_options[:fb_params][:user] = v
  }

  opts.on("-k", "--session [SESSION_KEY]", "the user's session key (default: #{fakebook_options[:fb_params][:session_key]})") { |v|
    fakebook_options[:fb_params][:session_key] = v
  }

  opts.on("--friends [FRIENDS]", "the user's friends (default: #{fakebook_options[:fb_params][:friends]})") { |v|
    fakebook_options[:fb_params][:friends] = v
  }

  opts.on("-h", "--host [HOST]", "host to listen on (default: #{rack_options[:Host]})") { |host|
    rack_options[:Host] = host
  }

  opts.on("-p", "--port [PORT]", "port to use (default: #{rack_options[:Port]})") { |port|
    rack_options[:Port] = port
  }

  opts.on("--server [SERVER]", "web server to (e.g., webrick, mongrel. default: mongrel)") { |s|
    case s
    when "mongrel"
      server = Rack::Handler::Mongrel
    when "webrick"
      server = Rack::Handler::WEBrick
    end
  }

  opts.on_tail("--help", "Show this message") do
    puts opts
    exit
  end

end.parse!

if File.exists?(config_file)
  config = YAML.load_file(config_file) || {}
  rack_options[:Host] = config['host'] if config['host']
  rack_options[:Port] = config['port'] if config['port']
  fakebook_options[:callback_url] = config['callback_url'] if config['callback_url']
  fakebook_options[:canvas_path]  = config['canvas_path'] if config['canvas_path']
  fakebook_options[:app_secret]   = config['app_secret'] if config['app_secret']
  fakebook_options[:fb_params][:user] = config['user'] if config['user']
  fakebook_options[:fb_params][:session_key] = config['session_key'] if config['session_key']
  fakebook_options[:fb_params][:friends] = config['friends'] if config['friends']
end

fakebook = Fakebook.new(fakebook_options)
app = Rack::Builder.new {
  use Rack::CommonLogger, STDERR
  use Rack::ShowExceptions
  use Rack::Static, :urls => ["/fakebook-assets"], :root => File.join(File.expand_path(File.dirname(__FILE__)), "..", "lib")
  use Rack::Lint
  run fakebook
}

proxy_url = "http://#{rack_options[:Host]}:#{rack_options[:Port]}#{fakebook_options[:canvas_path]}"
STDERR.puts "Starting Fakebook proxy from #{proxy_url} to #{fakebook_options[:callback_url]}"
STDERR.puts "  Using fb_params: #{fakebook.fb_params.inspect}"

server.run app, rack_options
